// source: api.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.myproto.CfgActions', null, global);
goog.exportSymbol('proto.myproto.CfgProtocolActions', null, global);
goog.exportSymbol('proto.myproto.CfgServer', null, global);
goog.exportSymbol('proto.myproto.Msg', null, global);
goog.exportSymbol('proto.myproto.Operation', null, global);
goog.exportSymbol('proto.myproto.Player', null, global);
goog.exportSymbol('proto.myproto.RequestClientHeartbeat', null, global);
goog.exportSymbol('proto.myproto.RequestClientPing', null, global);
goog.exportSymbol('proto.myproto.RequestClientPong', null, global);
goog.exportSymbol('proto.myproto.RequestGameOver', null, global);
goog.exportSymbol('proto.myproto.RequestGetRoom', null, global);
goog.exportSymbol('proto.myproto.RequestLogin', null, global);
goog.exportSymbol('proto.myproto.RequestPlayerMatchSign', null, global);
goog.exportSymbol('proto.myproto.RequestPlayerMatchSignCancel', null, global);
goog.exportSymbol('proto.myproto.RequestPlayerOperations', null, global);
goog.exportSymbol('proto.myproto.RequestPlayerOver', null, global);
goog.exportSymbol('proto.myproto.RequestPlayerReady', null, global);
goog.exportSymbol('proto.myproto.RequestPlayerResumeGame', null, global);
goog.exportSymbol('proto.myproto.RequestRoomHistory', null, global);
goog.exportSymbol('proto.myproto.ResponseEnterBattle', null, global);
goog.exportSymbol('proto.myproto.ResponseGameOver', null, global);
goog.exportSymbol('proto.myproto.ResponseKickOff', null, global);
goog.exportSymbol('proto.myproto.ResponseLoginRes', null, global);
goog.exportSymbol('proto.myproto.ResponseOtherPlayerOffline', null, global);
goog.exportSymbol('proto.myproto.ResponseOtherPlayerOver', null, global);
goog.exportSymbol('proto.myproto.ResponseOtherPlayerResumeGame', null, global);
goog.exportSymbol('proto.myproto.ResponsePlayerMatchSignFailed', null, global);
goog.exportSymbol('proto.myproto.ResponsePlayerMatchingFailed', null, global);
goog.exportSymbol('proto.myproto.ResponsePlayerStatus', null, global);
goog.exportSymbol('proto.myproto.ResponsePushLogicFrame', null, global);
goog.exportSymbol('proto.myproto.ResponsePushRoomHistory', null, global);
goog.exportSymbol('proto.myproto.ResponsePushRoomInfo', null, global);
goog.exportSymbol('proto.myproto.ResponseReadyTimeout', null, global);
goog.exportSymbol('proto.myproto.ResponseRestartGame', null, global);
goog.exportSymbol('proto.myproto.ResponseRoomHistory', null, global);
goog.exportSymbol('proto.myproto.ResponseServerPing', null, global);
goog.exportSymbol('proto.myproto.ResponseServerPong', null, global);
goog.exportSymbol('proto.myproto.ResponseStartBattle', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.myproto.RequestLogin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.myproto.RequestLogin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.myproto.RequestLogin.displayName = 'proto.myproto.RequestLogin';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.myproto.RequestClientPong = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.myproto.RequestClientPong, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.myproto.RequestClientPong.displayName = 'proto.myproto.RequestClientPong';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.myproto.RequestPlayerOperations = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.myproto.RequestPlayerOperations.repeatedFields_, null);
};
goog.inherits(proto.myproto.RequestPlayerOperations, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.myproto.RequestPlayerOperations.displayName = 'proto.myproto.RequestPlayerOperations';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.myproto.Operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.myproto.Operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.myproto.Operation.displayName = 'proto.myproto.Operation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.myproto.RequestClientPing = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.myproto.RequestClientPing, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.myproto.RequestClientPing.displayName = 'proto.myproto.RequestClientPing';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.myproto.RequestPlayerResumeGame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.myproto.RequestPlayerResumeGame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.myproto.RequestPlayerResumeGame.displayName = 'proto.myproto.RequestPlayerResumeGame';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.myproto.RequestPlayerMatchSign = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.myproto.RequestPlayerMatchSign, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.myproto.RequestPlayerMatchSign.displayName = 'proto.myproto.RequestPlayerMatchSign';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.myproto.RequestPlayerReady = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.myproto.RequestPlayerReady, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.myproto.RequestPlayerReady.displayName = 'proto.myproto.RequestPlayerReady';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.myproto.RequestGetRoom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.myproto.RequestGetRoom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.myproto.RequestGetRoom.displayName = 'proto.myproto.RequestGetRoom';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.myproto.RequestRoomHistory = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.myproto.RequestRoomHistory, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.myproto.RequestRoomHistory.displayName = 'proto.myproto.RequestRoomHistory';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.myproto.RequestPlayerMatchSignCancel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.myproto.RequestPlayerMatchSignCancel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.myproto.RequestPlayerMatchSignCancel.displayName = 'proto.myproto.RequestPlayerMatchSignCancel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.myproto.RequestClientHeartbeat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.myproto.RequestClientHeartbeat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.myproto.RequestClientHeartbeat.displayName = 'proto.myproto.RequestClientHeartbeat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.myproto.RequestGameOver = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.myproto.RequestGameOver, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.myproto.RequestGameOver.displayName = 'proto.myproto.RequestGameOver';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.myproto.RequestPlayerOver = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.myproto.RequestPlayerOver, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.myproto.RequestPlayerOver.displayName = 'proto.myproto.RequestPlayerOver';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.myproto.ResponseLoginRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.myproto.ResponseLoginRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.myproto.ResponseLoginRes.displayName = 'proto.myproto.ResponseLoginRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.myproto.ResponsePlayerStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.myproto.ResponsePlayerStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.myproto.ResponsePlayerStatus.displayName = 'proto.myproto.ResponsePlayerStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.myproto.ResponseOtherPlayerOffline = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.myproto.ResponseOtherPlayerOffline, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.myproto.ResponseOtherPlayerOffline.displayName = 'proto.myproto.ResponseOtherPlayerOffline';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.myproto.ResponseKickOff = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.myproto.ResponseKickOff, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.myproto.ResponseKickOff.displayName = 'proto.myproto.ResponseKickOff';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.myproto.ResponseStartBattle = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.myproto.ResponseStartBattle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.myproto.ResponseStartBattle.displayName = 'proto.myproto.ResponseStartBattle';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.myproto.ResponseServerPing = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.myproto.ResponseServerPing, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.myproto.ResponseServerPing.displayName = 'proto.myproto.ResponseServerPing';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.myproto.ResponseServerPong = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.myproto.ResponseServerPong, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.myproto.ResponseServerPong.displayName = 'proto.myproto.ResponseServerPong';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.myproto.ResponseEnterBattle = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.myproto.ResponseEnterBattle.repeatedFields_, null);
};
goog.inherits(proto.myproto.ResponseEnterBattle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.myproto.ResponseEnterBattle.displayName = 'proto.myproto.ResponseEnterBattle';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.myproto.ResponsePushLogicFrame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.myproto.ResponsePushLogicFrame.repeatedFields_, null);
};
goog.inherits(proto.myproto.ResponsePushLogicFrame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.myproto.ResponsePushLogicFrame.displayName = 'proto.myproto.ResponsePushLogicFrame';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.myproto.ResponseOtherPlayerOver = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.myproto.ResponseOtherPlayerOver, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.myproto.ResponseOtherPlayerOver.displayName = 'proto.myproto.ResponseOtherPlayerOver';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.myproto.ResponseGameOver = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.myproto.ResponseGameOver, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.myproto.ResponseGameOver.displayName = 'proto.myproto.ResponseGameOver';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.myproto.ResponseReadyTimeout = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.myproto.ResponseReadyTimeout, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.myproto.ResponseReadyTimeout.displayName = 'proto.myproto.ResponseReadyTimeout';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.myproto.ResponsePushRoomInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.myproto.ResponsePushRoomInfo.repeatedFields_, null);
};
goog.inherits(proto.myproto.ResponsePushRoomInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.myproto.ResponsePushRoomInfo.displayName = 'proto.myproto.ResponsePushRoomInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.myproto.ResponsePushRoomHistory = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.myproto.ResponsePushRoomHistory.repeatedFields_, null);
};
goog.inherits(proto.myproto.ResponsePushRoomHistory, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.myproto.ResponsePushRoomHistory.displayName = 'proto.myproto.ResponsePushRoomHistory';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.myproto.ResponseRoomHistory = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.myproto.ResponseRoomHistory, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.myproto.ResponseRoomHistory.displayName = 'proto.myproto.ResponseRoomHistory';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.myproto.ResponseOtherPlayerResumeGame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.myproto.ResponseOtherPlayerResumeGame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.myproto.ResponseOtherPlayerResumeGame.displayName = 'proto.myproto.ResponseOtherPlayerResumeGame';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.myproto.Player = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.myproto.Player, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.myproto.Player.displayName = 'proto.myproto.Player';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.myproto.ResponseRestartGame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.myproto.ResponseRestartGame.repeatedFields_, null);
};
goog.inherits(proto.myproto.ResponseRestartGame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.myproto.ResponseRestartGame.displayName = 'proto.myproto.ResponseRestartGame';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.myproto.ResponsePlayerMatchSignFailed = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.myproto.ResponsePlayerMatchSignFailed, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.myproto.ResponsePlayerMatchSignFailed.displayName = 'proto.myproto.ResponsePlayerMatchSignFailed';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.myproto.ResponsePlayerMatchingFailed = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.myproto.ResponsePlayerMatchingFailed, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.myproto.ResponsePlayerMatchingFailed.displayName = 'proto.myproto.ResponsePlayerMatchingFailed';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.myproto.CfgServer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.myproto.CfgServer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.myproto.CfgServer.displayName = 'proto.myproto.CfgServer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.myproto.CfgProtocolActions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.myproto.CfgProtocolActions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.myproto.CfgProtocolActions.displayName = 'proto.myproto.CfgProtocolActions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.myproto.CfgActions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.myproto.CfgActions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.myproto.CfgActions.displayName = 'proto.myproto.CfgActions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.myproto.Msg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.myproto.Msg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.myproto.Msg.displayName = 'proto.myproto.Msg';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.myproto.RequestLogin.prototype.toObject = function(opt_includeInstance) {
  return proto.myproto.RequestLogin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.myproto.RequestLogin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.RequestLogin.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.myproto.RequestLogin}
 */
proto.myproto.RequestLogin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.myproto.RequestLogin;
  return proto.myproto.RequestLogin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.myproto.RequestLogin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.myproto.RequestLogin}
 */
proto.myproto.RequestLogin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.myproto.RequestLogin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.myproto.RequestLogin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.myproto.RequestLogin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.RequestLogin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.myproto.RequestLogin.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.myproto.RequestLogin} returns this
 */
proto.myproto.RequestLogin.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.myproto.RequestClientPong.prototype.toObject = function(opt_includeInstance) {
  return proto.myproto.RequestClientPong.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.myproto.RequestClientPong} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.RequestClientPong.toObject = function(includeInstance, msg) {
  var f, obj = {
    addTime: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clientReceiveTime: jspb.Message.getFieldWithDefault(msg, 2, 0),
    serverResponseTime: jspb.Message.getFieldWithDefault(msg, 3, 0),
    rttTimeout: jspb.Message.getFieldWithDefault(msg, 4, 0),
    rttTimes: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.myproto.RequestClientPong}
 */
proto.myproto.RequestClientPong.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.myproto.RequestClientPong;
  return proto.myproto.RequestClientPong.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.myproto.RequestClientPong} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.myproto.RequestClientPong}
 */
proto.myproto.RequestClientPong.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAddTime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setClientReceiveTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setServerResponseTime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRttTimeout(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRttTimes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.myproto.RequestClientPong.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.myproto.RequestClientPong.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.myproto.RequestClientPong} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.RequestClientPong.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddTime();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getClientReceiveTime();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getServerResponseTime();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getRttTimeout();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getRttTimes();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional int64 add_time = 1;
 * @return {number}
 */
proto.myproto.RequestClientPong.prototype.getAddTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.RequestClientPong} returns this
 */
proto.myproto.RequestClientPong.prototype.setAddTime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 client_receive_time = 2;
 * @return {number}
 */
proto.myproto.RequestClientPong.prototype.getClientReceiveTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.RequestClientPong} returns this
 */
proto.myproto.RequestClientPong.prototype.setClientReceiveTime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 server_response_time = 3;
 * @return {number}
 */
proto.myproto.RequestClientPong.prototype.getServerResponseTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.RequestClientPong} returns this
 */
proto.myproto.RequestClientPong.prototype.setServerResponseTime = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 rtt_timeout = 4;
 * @return {number}
 */
proto.myproto.RequestClientPong.prototype.getRttTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.RequestClientPong} returns this
 */
proto.myproto.RequestClientPong.prototype.setRttTimeout = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 rtt_times = 5;
 * @return {number}
 */
proto.myproto.RequestClientPong.prototype.getRttTimes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.RequestClientPong} returns this
 */
proto.myproto.RequestClientPong.prototype.setRttTimes = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.myproto.RequestPlayerOperations.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.myproto.RequestPlayerOperations.prototype.toObject = function(opt_includeInstance) {
  return proto.myproto.RequestPlayerOperations.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.myproto.RequestPlayerOperations} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.RequestPlayerOperations.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    roomId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sequenceNumber: jspb.Message.getFieldWithDefault(msg, 3, 0),
    operationsList: jspb.Message.toObjectList(msg.getOperationsList(),
    proto.myproto.Operation.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.myproto.RequestPlayerOperations}
 */
proto.myproto.RequestPlayerOperations.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.myproto.RequestPlayerOperations;
  return proto.myproto.RequestPlayerOperations.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.myproto.RequestPlayerOperations} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.myproto.RequestPlayerOperations}
 */
proto.myproto.RequestPlayerOperations.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSequenceNumber(value);
      break;
    case 4:
      var value = new proto.myproto.Operation;
      reader.readMessage(value,proto.myproto.Operation.deserializeBinaryFromReader);
      msg.addOperations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.myproto.RequestPlayerOperations.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.myproto.RequestPlayerOperations.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.myproto.RequestPlayerOperations} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.RequestPlayerOperations.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRoomId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSequenceNumber();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getOperationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.myproto.Operation.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.myproto.RequestPlayerOperations.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.RequestPlayerOperations} returns this
 */
proto.myproto.RequestPlayerOperations.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string room_id = 2;
 * @return {string}
 */
proto.myproto.RequestPlayerOperations.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.myproto.RequestPlayerOperations} returns this
 */
proto.myproto.RequestPlayerOperations.prototype.setRoomId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 sequence_number = 3;
 * @return {number}
 */
proto.myproto.RequestPlayerOperations.prototype.getSequenceNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.RequestPlayerOperations} returns this
 */
proto.myproto.RequestPlayerOperations.prototype.setSequenceNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated Operation operations = 4;
 * @return {!Array<!proto.myproto.Operation>}
 */
proto.myproto.RequestPlayerOperations.prototype.getOperationsList = function() {
  return /** @type{!Array<!proto.myproto.Operation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.myproto.Operation, 4));
};


/**
 * @param {!Array<!proto.myproto.Operation>} value
 * @return {!proto.myproto.RequestPlayerOperations} returns this
*/
proto.myproto.RequestPlayerOperations.prototype.setOperationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.myproto.Operation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.myproto.Operation}
 */
proto.myproto.RequestPlayerOperations.prototype.addOperations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.myproto.Operation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.myproto.RequestPlayerOperations} returns this
 */
proto.myproto.RequestPlayerOperations.prototype.clearOperationsList = function() {
  return this.setOperationsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.myproto.Operation.prototype.toObject = function(opt_includeInstance) {
  return proto.myproto.Operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.myproto.Operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.Operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    event: jspb.Message.getFieldWithDefault(msg, 2, ""),
    value: jspb.Message.getFieldWithDefault(msg, 3, ""),
    playerId: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.myproto.Operation}
 */
proto.myproto.Operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.myproto.Operation;
  return proto.myproto.Operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.myproto.Operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.myproto.Operation}
 */
proto.myproto.Operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEvent(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlayerId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.myproto.Operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.myproto.Operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.myproto.Operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.Operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getEvent();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPlayerId();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.myproto.Operation.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.Operation} returns this
 */
proto.myproto.Operation.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string event = 2;
 * @return {string}
 */
proto.myproto.Operation.prototype.getEvent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.myproto.Operation} returns this
 */
proto.myproto.Operation.prototype.setEvent = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string value = 3;
 * @return {string}
 */
proto.myproto.Operation.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.myproto.Operation} returns this
 */
proto.myproto.Operation.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 player_id = 4;
 * @return {number}
 */
proto.myproto.Operation.prototype.getPlayerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.Operation} returns this
 */
proto.myproto.Operation.prototype.setPlayerId = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.myproto.RequestClientPing.prototype.toObject = function(opt_includeInstance) {
  return proto.myproto.RequestClientPing.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.myproto.RequestClientPing} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.RequestClientPing.toObject = function(includeInstance, msg) {
  var f, obj = {
    addTime: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clientReceiveTime: jspb.Message.getFieldWithDefault(msg, 2, 0),
    serverResponseTime: jspb.Message.getFieldWithDefault(msg, 3, 0),
    rttTimeout: jspb.Message.getFieldWithDefault(msg, 4, 0),
    rttTimes: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.myproto.RequestClientPing}
 */
proto.myproto.RequestClientPing.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.myproto.RequestClientPing;
  return proto.myproto.RequestClientPing.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.myproto.RequestClientPing} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.myproto.RequestClientPing}
 */
proto.myproto.RequestClientPing.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAddTime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setClientReceiveTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setServerResponseTime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRttTimeout(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRttTimes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.myproto.RequestClientPing.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.myproto.RequestClientPing.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.myproto.RequestClientPing} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.RequestClientPing.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddTime();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getClientReceiveTime();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getServerResponseTime();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getRttTimeout();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getRttTimes();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional int64 add_time = 1;
 * @return {number}
 */
proto.myproto.RequestClientPing.prototype.getAddTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.RequestClientPing} returns this
 */
proto.myproto.RequestClientPing.prototype.setAddTime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 client_receive_time = 2;
 * @return {number}
 */
proto.myproto.RequestClientPing.prototype.getClientReceiveTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.RequestClientPing} returns this
 */
proto.myproto.RequestClientPing.prototype.setClientReceiveTime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 server_response_time = 3;
 * @return {number}
 */
proto.myproto.RequestClientPing.prototype.getServerResponseTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.RequestClientPing} returns this
 */
proto.myproto.RequestClientPing.prototype.setServerResponseTime = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 rtt_timeout = 4;
 * @return {number}
 */
proto.myproto.RequestClientPing.prototype.getRttTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.RequestClientPing} returns this
 */
proto.myproto.RequestClientPing.prototype.setRttTimeout = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 rtt_times = 5;
 * @return {number}
 */
proto.myproto.RequestClientPing.prototype.getRttTimes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.RequestClientPing} returns this
 */
proto.myproto.RequestClientPing.prototype.setRttTimes = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.myproto.RequestPlayerResumeGame.prototype.toObject = function(opt_includeInstance) {
  return proto.myproto.RequestPlayerResumeGame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.myproto.RequestPlayerResumeGame} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.RequestPlayerResumeGame.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    roomId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sequenceNumber: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.myproto.RequestPlayerResumeGame}
 */
proto.myproto.RequestPlayerResumeGame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.myproto.RequestPlayerResumeGame;
  return proto.myproto.RequestPlayerResumeGame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.myproto.RequestPlayerResumeGame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.myproto.RequestPlayerResumeGame}
 */
proto.myproto.RequestPlayerResumeGame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlayerId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSequenceNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.myproto.RequestPlayerResumeGame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.myproto.RequestPlayerResumeGame.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.myproto.RequestPlayerResumeGame} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.RequestPlayerResumeGame.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRoomId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSequenceNumber();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 player_id = 1;
 * @return {number}
 */
proto.myproto.RequestPlayerResumeGame.prototype.getPlayerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.RequestPlayerResumeGame} returns this
 */
proto.myproto.RequestPlayerResumeGame.prototype.setPlayerId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string room_id = 2;
 * @return {string}
 */
proto.myproto.RequestPlayerResumeGame.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.myproto.RequestPlayerResumeGame} returns this
 */
proto.myproto.RequestPlayerResumeGame.prototype.setRoomId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 sequence_number = 3;
 * @return {number}
 */
proto.myproto.RequestPlayerResumeGame.prototype.getSequenceNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.RequestPlayerResumeGame} returns this
 */
proto.myproto.RequestPlayerResumeGame.prototype.setSequenceNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.myproto.RequestPlayerMatchSign.prototype.toObject = function(opt_includeInstance) {
  return proto.myproto.RequestPlayerMatchSign.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.myproto.RequestPlayerMatchSign} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.RequestPlayerMatchSign.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.myproto.RequestPlayerMatchSign}
 */
proto.myproto.RequestPlayerMatchSign.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.myproto.RequestPlayerMatchSign;
  return proto.myproto.RequestPlayerMatchSign.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.myproto.RequestPlayerMatchSign} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.myproto.RequestPlayerMatchSign}
 */
proto.myproto.RequestPlayerMatchSign.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlayerId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.myproto.RequestPlayerMatchSign.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.myproto.RequestPlayerMatchSign.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.myproto.RequestPlayerMatchSign} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.RequestPlayerMatchSign.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 player_id = 1;
 * @return {number}
 */
proto.myproto.RequestPlayerMatchSign.prototype.getPlayerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.RequestPlayerMatchSign} returns this
 */
proto.myproto.RequestPlayerMatchSign.prototype.setPlayerId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.myproto.RequestPlayerReady.prototype.toObject = function(opt_includeInstance) {
  return proto.myproto.RequestPlayerReady.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.myproto.RequestPlayerReady} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.RequestPlayerReady.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    roomId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.myproto.RequestPlayerReady}
 */
proto.myproto.RequestPlayerReady.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.myproto.RequestPlayerReady;
  return proto.myproto.RequestPlayerReady.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.myproto.RequestPlayerReady} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.myproto.RequestPlayerReady}
 */
proto.myproto.RequestPlayerReady.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlayerId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.myproto.RequestPlayerReady.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.myproto.RequestPlayerReady.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.myproto.RequestPlayerReady} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.RequestPlayerReady.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRoomId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 player_id = 1;
 * @return {number}
 */
proto.myproto.RequestPlayerReady.prototype.getPlayerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.RequestPlayerReady} returns this
 */
proto.myproto.RequestPlayerReady.prototype.setPlayerId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string room_id = 2;
 * @return {string}
 */
proto.myproto.RequestPlayerReady.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.myproto.RequestPlayerReady} returns this
 */
proto.myproto.RequestPlayerReady.prototype.setRoomId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.myproto.RequestGetRoom.prototype.toObject = function(opt_includeInstance) {
  return proto.myproto.RequestGetRoom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.myproto.RequestGetRoom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.RequestGetRoom.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    roomId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.myproto.RequestGetRoom}
 */
proto.myproto.RequestGetRoom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.myproto.RequestGetRoom;
  return proto.myproto.RequestGetRoom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.myproto.RequestGetRoom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.myproto.RequestGetRoom}
 */
proto.myproto.RequestGetRoom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlayerId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.myproto.RequestGetRoom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.myproto.RequestGetRoom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.myproto.RequestGetRoom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.RequestGetRoom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRoomId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 player_id = 1;
 * @return {number}
 */
proto.myproto.RequestGetRoom.prototype.getPlayerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.RequestGetRoom} returns this
 */
proto.myproto.RequestGetRoom.prototype.setPlayerId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string room_id = 2;
 * @return {string}
 */
proto.myproto.RequestGetRoom.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.myproto.RequestGetRoom} returns this
 */
proto.myproto.RequestGetRoom.prototype.setRoomId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.myproto.RequestRoomHistory.prototype.toObject = function(opt_includeInstance) {
  return proto.myproto.RequestRoomHistory.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.myproto.RequestRoomHistory} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.RequestRoomHistory.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    roomId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sequenceNumberstart: jspb.Message.getFieldWithDefault(msg, 3, 0),
    sequenceNumberend: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.myproto.RequestRoomHistory}
 */
proto.myproto.RequestRoomHistory.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.myproto.RequestRoomHistory;
  return proto.myproto.RequestRoomHistory.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.myproto.RequestRoomHistory} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.myproto.RequestRoomHistory}
 */
proto.myproto.RequestRoomHistory.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlayerId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSequenceNumberstart(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSequenceNumberend(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.myproto.RequestRoomHistory.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.myproto.RequestRoomHistory.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.myproto.RequestRoomHistory} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.RequestRoomHistory.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRoomId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSequenceNumberstart();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getSequenceNumberend();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional int32 player_id = 1;
 * @return {number}
 */
proto.myproto.RequestRoomHistory.prototype.getPlayerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.RequestRoomHistory} returns this
 */
proto.myproto.RequestRoomHistory.prototype.setPlayerId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string room_id = 2;
 * @return {string}
 */
proto.myproto.RequestRoomHistory.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.myproto.RequestRoomHistory} returns this
 */
proto.myproto.RequestRoomHistory.prototype.setRoomId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 sequence_numberStart = 3;
 * @return {number}
 */
proto.myproto.RequestRoomHistory.prototype.getSequenceNumberstart = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.RequestRoomHistory} returns this
 */
proto.myproto.RequestRoomHistory.prototype.setSequenceNumberstart = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 sequence_numberEnd = 4;
 * @return {number}
 */
proto.myproto.RequestRoomHistory.prototype.getSequenceNumberend = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.RequestRoomHistory} returns this
 */
proto.myproto.RequestRoomHistory.prototype.setSequenceNumberend = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.myproto.RequestPlayerMatchSignCancel.prototype.toObject = function(opt_includeInstance) {
  return proto.myproto.RequestPlayerMatchSignCancel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.myproto.RequestPlayerMatchSignCancel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.RequestPlayerMatchSignCancel.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.myproto.RequestPlayerMatchSignCancel}
 */
proto.myproto.RequestPlayerMatchSignCancel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.myproto.RequestPlayerMatchSignCancel;
  return proto.myproto.RequestPlayerMatchSignCancel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.myproto.RequestPlayerMatchSignCancel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.myproto.RequestPlayerMatchSignCancel}
 */
proto.myproto.RequestPlayerMatchSignCancel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlayerId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.myproto.RequestPlayerMatchSignCancel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.myproto.RequestPlayerMatchSignCancel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.myproto.RequestPlayerMatchSignCancel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.RequestPlayerMatchSignCancel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 player_id = 1;
 * @return {number}
 */
proto.myproto.RequestPlayerMatchSignCancel.prototype.getPlayerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.RequestPlayerMatchSignCancel} returns this
 */
proto.myproto.RequestPlayerMatchSignCancel.prototype.setPlayerId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.myproto.RequestClientHeartbeat.prototype.toObject = function(opt_includeInstance) {
  return proto.myproto.RequestClientHeartbeat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.myproto.RequestClientHeartbeat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.RequestClientHeartbeat.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.myproto.RequestClientHeartbeat}
 */
proto.myproto.RequestClientHeartbeat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.myproto.RequestClientHeartbeat;
  return proto.myproto.RequestClientHeartbeat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.myproto.RequestClientHeartbeat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.myproto.RequestClientHeartbeat}
 */
proto.myproto.RequestClientHeartbeat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.myproto.RequestClientHeartbeat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.myproto.RequestClientHeartbeat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.myproto.RequestClientHeartbeat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.RequestClientHeartbeat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTime();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 time = 1;
 * @return {number}
 */
proto.myproto.RequestClientHeartbeat.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.RequestClientHeartbeat} returns this
 */
proto.myproto.RequestClientHeartbeat.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.myproto.RequestGameOver.prototype.toObject = function(opt_includeInstance) {
  return proto.myproto.RequestGameOver.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.myproto.RequestGameOver} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.RequestGameOver.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    roomId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sequenceNumber: jspb.Message.getFieldWithDefault(msg, 3, 0),
    result: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.myproto.RequestGameOver}
 */
proto.myproto.RequestGameOver.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.myproto.RequestGameOver;
  return proto.myproto.RequestGameOver.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.myproto.RequestGameOver} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.myproto.RequestGameOver}
 */
proto.myproto.RequestGameOver.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlayerId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSequenceNumber(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.myproto.RequestGameOver.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.myproto.RequestGameOver.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.myproto.RequestGameOver} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.RequestGameOver.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRoomId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSequenceNumber();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getResult();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional int32 player_id = 1;
 * @return {number}
 */
proto.myproto.RequestGameOver.prototype.getPlayerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.RequestGameOver} returns this
 */
proto.myproto.RequestGameOver.prototype.setPlayerId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string room_id = 2;
 * @return {string}
 */
proto.myproto.RequestGameOver.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.myproto.RequestGameOver} returns this
 */
proto.myproto.RequestGameOver.prototype.setRoomId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 sequence_number = 3;
 * @return {number}
 */
proto.myproto.RequestGameOver.prototype.getSequenceNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.RequestGameOver} returns this
 */
proto.myproto.RequestGameOver.prototype.setSequenceNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string result = 4;
 * @return {string}
 */
proto.myproto.RequestGameOver.prototype.getResult = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.myproto.RequestGameOver} returns this
 */
proto.myproto.RequestGameOver.prototype.setResult = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.myproto.RequestPlayerOver.prototype.toObject = function(opt_includeInstance) {
  return proto.myproto.RequestPlayerOver.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.myproto.RequestPlayerOver} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.RequestPlayerOver.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    sequenceNumber: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.myproto.RequestPlayerOver}
 */
proto.myproto.RequestPlayerOver.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.myproto.RequestPlayerOver;
  return proto.myproto.RequestPlayerOver.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.myproto.RequestPlayerOver} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.myproto.RequestPlayerOver}
 */
proto.myproto.RequestPlayerOver.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlayerId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSequenceNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.myproto.RequestPlayerOver.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.myproto.RequestPlayerOver.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.myproto.RequestPlayerOver} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.RequestPlayerOver.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSequenceNumber();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 player_id = 1;
 * @return {number}
 */
proto.myproto.RequestPlayerOver.prototype.getPlayerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.RequestPlayerOver} returns this
 */
proto.myproto.RequestPlayerOver.prototype.setPlayerId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 sequence_number = 2;
 * @return {number}
 */
proto.myproto.RequestPlayerOver.prototype.getSequenceNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.RequestPlayerOver} returns this
 */
proto.myproto.RequestPlayerOver.prototype.setSequenceNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.myproto.ResponseLoginRes.prototype.toObject = function(opt_includeInstance) {
  return proto.myproto.ResponseLoginRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.myproto.ResponseLoginRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.ResponseLoginRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    errmsg: jspb.Message.getFieldWithDefault(msg, 2, ""),
    player: (f = msg.getPlayer()) && proto.myproto.Player.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.myproto.ResponseLoginRes}
 */
proto.myproto.ResponseLoginRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.myproto.ResponseLoginRes;
  return proto.myproto.ResponseLoginRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.myproto.ResponseLoginRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.myproto.ResponseLoginRes}
 */
proto.myproto.ResponseLoginRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrmsg(value);
      break;
    case 3:
      var value = new proto.myproto.Player;
      reader.readMessage(value,proto.myproto.Player.deserializeBinaryFromReader);
      msg.setPlayer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.myproto.ResponseLoginRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.myproto.ResponseLoginRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.myproto.ResponseLoginRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.ResponseLoginRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getErrmsg();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPlayer();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.myproto.Player.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.myproto.ResponseLoginRes.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.ResponseLoginRes} returns this
 */
proto.myproto.ResponseLoginRes.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string errMsg = 2;
 * @return {string}
 */
proto.myproto.ResponseLoginRes.prototype.getErrmsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.myproto.ResponseLoginRes} returns this
 */
proto.myproto.ResponseLoginRes.prototype.setErrmsg = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Player player = 3;
 * @return {?proto.myproto.Player}
 */
proto.myproto.ResponseLoginRes.prototype.getPlayer = function() {
  return /** @type{?proto.myproto.Player} */ (
    jspb.Message.getWrapperField(this, proto.myproto.Player, 3));
};


/**
 * @param {?proto.myproto.Player|undefined} value
 * @return {!proto.myproto.ResponseLoginRes} returns this
*/
proto.myproto.ResponseLoginRes.prototype.setPlayer = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.myproto.ResponseLoginRes} returns this
 */
proto.myproto.ResponseLoginRes.prototype.clearPlayer = function() {
  return this.setPlayer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.myproto.ResponseLoginRes.prototype.hasPlayer = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.myproto.ResponsePlayerStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.myproto.ResponsePlayerStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.myproto.ResponsePlayerStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.ResponsePlayerStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    nickname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    status: jspb.Message.getFieldWithDefault(msg, 3, 0),
    roomId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    addTime: jspb.Message.getFieldWithDefault(msg, 5, 0),
    upTime: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.myproto.ResponsePlayerStatus}
 */
proto.myproto.ResponsePlayerStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.myproto.ResponsePlayerStatus;
  return proto.myproto.ResponsePlayerStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.myproto.ResponsePlayerStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.myproto.ResponsePlayerStatus}
 */
proto.myproto.ResponsePlayerStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNickname(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAddTime(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUpTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.myproto.ResponsePlayerStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.myproto.ResponsePlayerStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.myproto.ResponsePlayerStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.ResponsePlayerStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getNickname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getRoomId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAddTime();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getUpTime();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.myproto.ResponsePlayerStatus.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.ResponsePlayerStatus} returns this
 */
proto.myproto.ResponsePlayerStatus.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string nickname = 2;
 * @return {string}
 */
proto.myproto.ResponsePlayerStatus.prototype.getNickname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.myproto.ResponsePlayerStatus} returns this
 */
proto.myproto.ResponsePlayerStatus.prototype.setNickname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 status = 3;
 * @return {number}
 */
proto.myproto.ResponsePlayerStatus.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.ResponsePlayerStatus} returns this
 */
proto.myproto.ResponsePlayerStatus.prototype.setStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string room_id = 4;
 * @return {string}
 */
proto.myproto.ResponsePlayerStatus.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.myproto.ResponsePlayerStatus} returns this
 */
proto.myproto.ResponsePlayerStatus.prototype.setRoomId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 add_time = 5;
 * @return {number}
 */
proto.myproto.ResponsePlayerStatus.prototype.getAddTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.ResponsePlayerStatus} returns this
 */
proto.myproto.ResponsePlayerStatus.prototype.setAddTime = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 up_time = 6;
 * @return {number}
 */
proto.myproto.ResponsePlayerStatus.prototype.getUpTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.ResponsePlayerStatus} returns this
 */
proto.myproto.ResponsePlayerStatus.prototype.setUpTime = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.myproto.ResponseOtherPlayerOffline.prototype.toObject = function(opt_includeInstance) {
  return proto.myproto.ResponseOtherPlayerOffline.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.myproto.ResponseOtherPlayerOffline} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.ResponseOtherPlayerOffline.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.myproto.ResponseOtherPlayerOffline}
 */
proto.myproto.ResponseOtherPlayerOffline.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.myproto.ResponseOtherPlayerOffline;
  return proto.myproto.ResponseOtherPlayerOffline.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.myproto.ResponseOtherPlayerOffline} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.myproto.ResponseOtherPlayerOffline}
 */
proto.myproto.ResponseOtherPlayerOffline.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlayerId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.myproto.ResponseOtherPlayerOffline.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.myproto.ResponseOtherPlayerOffline.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.myproto.ResponseOtherPlayerOffline} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.ResponseOtherPlayerOffline.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 player_id = 1;
 * @return {number}
 */
proto.myproto.ResponseOtherPlayerOffline.prototype.getPlayerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.ResponseOtherPlayerOffline} returns this
 */
proto.myproto.ResponseOtherPlayerOffline.prototype.setPlayerId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.myproto.ResponseKickOff.prototype.toObject = function(opt_includeInstance) {
  return proto.myproto.ResponseKickOff.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.myproto.ResponseKickOff} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.ResponseKickOff.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.myproto.ResponseKickOff}
 */
proto.myproto.ResponseKickOff.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.myproto.ResponseKickOff;
  return proto.myproto.ResponseKickOff.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.myproto.ResponseKickOff} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.myproto.ResponseKickOff}
 */
proto.myproto.ResponseKickOff.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.myproto.ResponseKickOff.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.myproto.ResponseKickOff.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.myproto.ResponseKickOff} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.ResponseKickOff.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTime();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 time = 1;
 * @return {number}
 */
proto.myproto.ResponseKickOff.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.ResponseKickOff} returns this
 */
proto.myproto.ResponseKickOff.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.myproto.ResponseStartBattle.prototype.toObject = function(opt_includeInstance) {
  return proto.myproto.ResponseStartBattle.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.myproto.ResponseStartBattle} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.ResponseStartBattle.toObject = function(includeInstance, msg) {
  var f, obj = {
    sequenceNumberStart: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.myproto.ResponseStartBattle}
 */
proto.myproto.ResponseStartBattle.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.myproto.ResponseStartBattle;
  return proto.myproto.ResponseStartBattle.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.myproto.ResponseStartBattle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.myproto.ResponseStartBattle}
 */
proto.myproto.ResponseStartBattle.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSequenceNumberStart(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.myproto.ResponseStartBattle.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.myproto.ResponseStartBattle.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.myproto.ResponseStartBattle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.ResponseStartBattle.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSequenceNumberStart();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 sequence_number_start = 1;
 * @return {number}
 */
proto.myproto.ResponseStartBattle.prototype.getSequenceNumberStart = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.ResponseStartBattle} returns this
 */
proto.myproto.ResponseStartBattle.prototype.setSequenceNumberStart = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.myproto.ResponseServerPing.prototype.toObject = function(opt_includeInstance) {
  return proto.myproto.ResponseServerPing.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.myproto.ResponseServerPing} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.ResponseServerPing.toObject = function(includeInstance, msg) {
  var f, obj = {
    addTime: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clientReceiveTime: jspb.Message.getFieldWithDefault(msg, 2, 0),
    serverResponseTime: jspb.Message.getFieldWithDefault(msg, 3, 0),
    rttTimeout: jspb.Message.getFieldWithDefault(msg, 4, 0),
    rttTimes: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.myproto.ResponseServerPing}
 */
proto.myproto.ResponseServerPing.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.myproto.ResponseServerPing;
  return proto.myproto.ResponseServerPing.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.myproto.ResponseServerPing} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.myproto.ResponseServerPing}
 */
proto.myproto.ResponseServerPing.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAddTime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setClientReceiveTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setServerResponseTime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRttTimeout(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRttTimes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.myproto.ResponseServerPing.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.myproto.ResponseServerPing.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.myproto.ResponseServerPing} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.ResponseServerPing.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddTime();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getClientReceiveTime();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getServerResponseTime();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getRttTimeout();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getRttTimes();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional int64 add_time = 1;
 * @return {number}
 */
proto.myproto.ResponseServerPing.prototype.getAddTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.ResponseServerPing} returns this
 */
proto.myproto.ResponseServerPing.prototype.setAddTime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 client_receive_time = 2;
 * @return {number}
 */
proto.myproto.ResponseServerPing.prototype.getClientReceiveTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.ResponseServerPing} returns this
 */
proto.myproto.ResponseServerPing.prototype.setClientReceiveTime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 server_response_time = 3;
 * @return {number}
 */
proto.myproto.ResponseServerPing.prototype.getServerResponseTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.ResponseServerPing} returns this
 */
proto.myproto.ResponseServerPing.prototype.setServerResponseTime = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 rtt_timeout = 4;
 * @return {number}
 */
proto.myproto.ResponseServerPing.prototype.getRttTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.ResponseServerPing} returns this
 */
proto.myproto.ResponseServerPing.prototype.setRttTimeout = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 rtt_times = 5;
 * @return {number}
 */
proto.myproto.ResponseServerPing.prototype.getRttTimes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.ResponseServerPing} returns this
 */
proto.myproto.ResponseServerPing.prototype.setRttTimes = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.myproto.ResponseServerPong.prototype.toObject = function(opt_includeInstance) {
  return proto.myproto.ResponseServerPong.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.myproto.ResponseServerPong} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.ResponseServerPong.toObject = function(includeInstance, msg) {
  var f, obj = {
    addTime: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clientReceiveTime: jspb.Message.getFieldWithDefault(msg, 2, 0),
    serverResponseTime: jspb.Message.getFieldWithDefault(msg, 3, 0),
    rttTimeout: jspb.Message.getFieldWithDefault(msg, 4, 0),
    rttTimes: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.myproto.ResponseServerPong}
 */
proto.myproto.ResponseServerPong.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.myproto.ResponseServerPong;
  return proto.myproto.ResponseServerPong.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.myproto.ResponseServerPong} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.myproto.ResponseServerPong}
 */
proto.myproto.ResponseServerPong.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAddTime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setClientReceiveTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setServerResponseTime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRttTimeout(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRttTimes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.myproto.ResponseServerPong.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.myproto.ResponseServerPong.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.myproto.ResponseServerPong} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.ResponseServerPong.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddTime();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getClientReceiveTime();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getServerResponseTime();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getRttTimeout();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getRttTimes();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional int64 add_time = 1;
 * @return {number}
 */
proto.myproto.ResponseServerPong.prototype.getAddTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.ResponseServerPong} returns this
 */
proto.myproto.ResponseServerPong.prototype.setAddTime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 client_receive_time = 2;
 * @return {number}
 */
proto.myproto.ResponseServerPong.prototype.getClientReceiveTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.ResponseServerPong} returns this
 */
proto.myproto.ResponseServerPong.prototype.setClientReceiveTime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 server_response_time = 3;
 * @return {number}
 */
proto.myproto.ResponseServerPong.prototype.getServerResponseTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.ResponseServerPong} returns this
 */
proto.myproto.ResponseServerPong.prototype.setServerResponseTime = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 rtt_timeout = 4;
 * @return {number}
 */
proto.myproto.ResponseServerPong.prototype.getRttTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.ResponseServerPong} returns this
 */
proto.myproto.ResponseServerPong.prototype.setRttTimeout = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 rtt_times = 5;
 * @return {number}
 */
proto.myproto.ResponseServerPong.prototype.getRttTimes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.ResponseServerPong} returns this
 */
proto.myproto.ResponseServerPong.prototype.setRttTimes = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.myproto.ResponseEnterBattle.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.myproto.ResponseEnterBattle.prototype.toObject = function(opt_includeInstance) {
  return proto.myproto.ResponseEnterBattle.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.myproto.ResponseEnterBattle} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.ResponseEnterBattle.toObject = function(includeInstance, msg) {
  var f, obj = {
    randSeek: jspb.Message.getFieldWithDefault(msg, 1, 0),
    roomId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sequenceNumber: jspb.Message.getFieldWithDefault(msg, 3, 0),
    status: jspb.Message.getFieldWithDefault(msg, 4, 0),
    addTime: jspb.Message.getFieldWithDefault(msg, 5, 0),
    time: jspb.Message.getFieldWithDefault(msg, 6, 0),
    playerListList: jspb.Message.toObjectList(msg.getPlayerListList(),
    proto.myproto.Player.toObject, includeInstance),
    udpPort: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.myproto.ResponseEnterBattle}
 */
proto.myproto.ResponseEnterBattle.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.myproto.ResponseEnterBattle;
  return proto.myproto.ResponseEnterBattle.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.myproto.ResponseEnterBattle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.myproto.ResponseEnterBattle}
 */
proto.myproto.ResponseEnterBattle.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRandSeek(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSequenceNumber(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAddTime(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTime(value);
      break;
    case 7:
      var value = new proto.myproto.Player;
      reader.readMessage(value,proto.myproto.Player.deserializeBinaryFromReader);
      msg.addPlayerList(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setUdpPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.myproto.ResponseEnterBattle.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.myproto.ResponseEnterBattle.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.myproto.ResponseEnterBattle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.ResponseEnterBattle.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRandSeek();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRoomId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSequenceNumber();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getAddTime();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getTime();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getPlayerListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.myproto.Player.serializeBinaryToWriter
    );
  }
  f = message.getUdpPort();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional int32 rand_seek = 1;
 * @return {number}
 */
proto.myproto.ResponseEnterBattle.prototype.getRandSeek = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.ResponseEnterBattle} returns this
 */
proto.myproto.ResponseEnterBattle.prototype.setRandSeek = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string room_id = 2;
 * @return {string}
 */
proto.myproto.ResponseEnterBattle.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.myproto.ResponseEnterBattle} returns this
 */
proto.myproto.ResponseEnterBattle.prototype.setRoomId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 sequence_number = 3;
 * @return {number}
 */
proto.myproto.ResponseEnterBattle.prototype.getSequenceNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.ResponseEnterBattle} returns this
 */
proto.myproto.ResponseEnterBattle.prototype.setSequenceNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 status = 4;
 * @return {number}
 */
proto.myproto.ResponseEnterBattle.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.ResponseEnterBattle} returns this
 */
proto.myproto.ResponseEnterBattle.prototype.setStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 add_time = 5;
 * @return {number}
 */
proto.myproto.ResponseEnterBattle.prototype.getAddTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.ResponseEnterBattle} returns this
 */
proto.myproto.ResponseEnterBattle.prototype.setAddTime = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 time = 6;
 * @return {number}
 */
proto.myproto.ResponseEnterBattle.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.ResponseEnterBattle} returns this
 */
proto.myproto.ResponseEnterBattle.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * repeated Player player_list = 7;
 * @return {!Array<!proto.myproto.Player>}
 */
proto.myproto.ResponseEnterBattle.prototype.getPlayerListList = function() {
  return /** @type{!Array<!proto.myproto.Player>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.myproto.Player, 7));
};


/**
 * @param {!Array<!proto.myproto.Player>} value
 * @return {!proto.myproto.ResponseEnterBattle} returns this
*/
proto.myproto.ResponseEnterBattle.prototype.setPlayerListList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.myproto.Player=} opt_value
 * @param {number=} opt_index
 * @return {!proto.myproto.Player}
 */
proto.myproto.ResponseEnterBattle.prototype.addPlayerList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.myproto.Player, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.myproto.ResponseEnterBattle} returns this
 */
proto.myproto.ResponseEnterBattle.prototype.clearPlayerListList = function() {
  return this.setPlayerListList([]);
};


/**
 * optional string udp_port = 8;
 * @return {string}
 */
proto.myproto.ResponseEnterBattle.prototype.getUdpPort = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.myproto.ResponseEnterBattle} returns this
 */
proto.myproto.ResponseEnterBattle.prototype.setUdpPort = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.myproto.ResponsePushLogicFrame.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.myproto.ResponsePushLogicFrame.prototype.toObject = function(opt_includeInstance) {
  return proto.myproto.ResponsePushLogicFrame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.myproto.ResponsePushLogicFrame} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.ResponsePushLogicFrame.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    roomId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sequenceNumber: jspb.Message.getFieldWithDefault(msg, 3, 0),
    operationsList: jspb.Message.toObjectList(msg.getOperationsList(),
    proto.myproto.Operation.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.myproto.ResponsePushLogicFrame}
 */
proto.myproto.ResponsePushLogicFrame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.myproto.ResponsePushLogicFrame;
  return proto.myproto.ResponsePushLogicFrame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.myproto.ResponsePushLogicFrame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.myproto.ResponsePushLogicFrame}
 */
proto.myproto.ResponsePushLogicFrame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSequenceNumber(value);
      break;
    case 4:
      var value = new proto.myproto.Operation;
      reader.readMessage(value,proto.myproto.Operation.deserializeBinaryFromReader);
      msg.addOperations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.myproto.ResponsePushLogicFrame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.myproto.ResponsePushLogicFrame.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.myproto.ResponsePushLogicFrame} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.ResponsePushLogicFrame.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRoomId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSequenceNumber();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getOperationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.myproto.Operation.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.myproto.ResponsePushLogicFrame.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.ResponsePushLogicFrame} returns this
 */
proto.myproto.ResponsePushLogicFrame.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string room_id = 2;
 * @return {string}
 */
proto.myproto.ResponsePushLogicFrame.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.myproto.ResponsePushLogicFrame} returns this
 */
proto.myproto.ResponsePushLogicFrame.prototype.setRoomId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 sequence_number = 3;
 * @return {number}
 */
proto.myproto.ResponsePushLogicFrame.prototype.getSequenceNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.ResponsePushLogicFrame} returns this
 */
proto.myproto.ResponsePushLogicFrame.prototype.setSequenceNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated Operation operations = 4;
 * @return {!Array<!proto.myproto.Operation>}
 */
proto.myproto.ResponsePushLogicFrame.prototype.getOperationsList = function() {
  return /** @type{!Array<!proto.myproto.Operation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.myproto.Operation, 4));
};


/**
 * @param {!Array<!proto.myproto.Operation>} value
 * @return {!proto.myproto.ResponsePushLogicFrame} returns this
*/
proto.myproto.ResponsePushLogicFrame.prototype.setOperationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.myproto.Operation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.myproto.Operation}
 */
proto.myproto.ResponsePushLogicFrame.prototype.addOperations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.myproto.Operation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.myproto.ResponsePushLogicFrame} returns this
 */
proto.myproto.ResponsePushLogicFrame.prototype.clearOperationsList = function() {
  return this.setOperationsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.myproto.ResponseOtherPlayerOver.prototype.toObject = function(opt_includeInstance) {
  return proto.myproto.ResponseOtherPlayerOver.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.myproto.ResponseOtherPlayerOver} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.ResponseOtherPlayerOver.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    sequenceNumber: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.myproto.ResponseOtherPlayerOver}
 */
proto.myproto.ResponseOtherPlayerOver.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.myproto.ResponseOtherPlayerOver;
  return proto.myproto.ResponseOtherPlayerOver.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.myproto.ResponseOtherPlayerOver} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.myproto.ResponseOtherPlayerOver}
 */
proto.myproto.ResponseOtherPlayerOver.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlayerId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSequenceNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.myproto.ResponseOtherPlayerOver.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.myproto.ResponseOtherPlayerOver.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.myproto.ResponseOtherPlayerOver} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.ResponseOtherPlayerOver.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSequenceNumber();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 player_id = 1;
 * @return {number}
 */
proto.myproto.ResponseOtherPlayerOver.prototype.getPlayerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.ResponseOtherPlayerOver} returns this
 */
proto.myproto.ResponseOtherPlayerOver.prototype.setPlayerId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 sequence_number = 2;
 * @return {number}
 */
proto.myproto.ResponseOtherPlayerOver.prototype.getSequenceNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.ResponseOtherPlayerOver} returns this
 */
proto.myproto.ResponseOtherPlayerOver.prototype.setSequenceNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.myproto.ResponseGameOver.prototype.toObject = function(opt_includeInstance) {
  return proto.myproto.ResponseGameOver.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.myproto.ResponseGameOver} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.ResponseGameOver.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    roomId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sequenceNumber: jspb.Message.getFieldWithDefault(msg, 3, 0),
    result: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.myproto.ResponseGameOver}
 */
proto.myproto.ResponseGameOver.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.myproto.ResponseGameOver;
  return proto.myproto.ResponseGameOver.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.myproto.ResponseGameOver} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.myproto.ResponseGameOver}
 */
proto.myproto.ResponseGameOver.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlayerId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSequenceNumber(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.myproto.ResponseGameOver.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.myproto.ResponseGameOver.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.myproto.ResponseGameOver} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.ResponseGameOver.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRoomId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSequenceNumber();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getResult();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional int32 player_id = 1;
 * @return {number}
 */
proto.myproto.ResponseGameOver.prototype.getPlayerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.ResponseGameOver} returns this
 */
proto.myproto.ResponseGameOver.prototype.setPlayerId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string room_id = 2;
 * @return {string}
 */
proto.myproto.ResponseGameOver.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.myproto.ResponseGameOver} returns this
 */
proto.myproto.ResponseGameOver.prototype.setRoomId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 sequence_number = 3;
 * @return {number}
 */
proto.myproto.ResponseGameOver.prototype.getSequenceNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.ResponseGameOver} returns this
 */
proto.myproto.ResponseGameOver.prototype.setSequenceNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string result = 4;
 * @return {string}
 */
proto.myproto.ResponseGameOver.prototype.getResult = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.myproto.ResponseGameOver} returns this
 */
proto.myproto.ResponseGameOver.prototype.setResult = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.myproto.ResponseReadyTimeout.prototype.toObject = function(opt_includeInstance) {
  return proto.myproto.ResponseReadyTimeout.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.myproto.ResponseReadyTimeout} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.ResponseReadyTimeout.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.myproto.ResponseReadyTimeout}
 */
proto.myproto.ResponseReadyTimeout.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.myproto.ResponseReadyTimeout;
  return proto.myproto.ResponseReadyTimeout.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.myproto.ResponseReadyTimeout} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.myproto.ResponseReadyTimeout}
 */
proto.myproto.ResponseReadyTimeout.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.myproto.ResponseReadyTimeout.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.myproto.ResponseReadyTimeout.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.myproto.ResponseReadyTimeout} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.ResponseReadyTimeout.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string room_id = 1;
 * @return {string}
 */
proto.myproto.ResponseReadyTimeout.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.myproto.ResponseReadyTimeout} returns this
 */
proto.myproto.ResponseReadyTimeout.prototype.setRoomId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.myproto.ResponsePushRoomInfo.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.myproto.ResponsePushRoomInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.myproto.ResponsePushRoomInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.myproto.ResponsePushRoomInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.ResponsePushRoomInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    addTime: jspb.Message.getFieldWithDefault(msg, 2, 0),
    status: jspb.Message.getFieldWithDefault(msg, 3, 0),
    timeout: jspb.Message.getFieldWithDefault(msg, 4, 0),
    sequenceNumber: jspb.Message.getFieldWithDefault(msg, 5, 0),
    randSeek: jspb.Message.getFieldWithDefault(msg, 6, 0),
    playerListList: jspb.Message.toObjectList(msg.getPlayerListList(),
    proto.myproto.Player.toObject, includeInstance),
    roomId: jspb.Message.getFieldWithDefault(msg, 8, ""),
    startTime: jspb.Message.getFieldWithDefault(msg, 9, 0),
    endTime: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.myproto.ResponsePushRoomInfo}
 */
proto.myproto.ResponsePushRoomInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.myproto.ResponsePushRoomInfo;
  return proto.myproto.ResponsePushRoomInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.myproto.ResponsePushRoomInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.myproto.ResponsePushRoomInfo}
 */
proto.myproto.ResponsePushRoomInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAddTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTimeout(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSequenceNumber(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRandSeek(value);
      break;
    case 7:
      var value = new proto.myproto.Player;
      reader.readMessage(value,proto.myproto.Player.deserializeBinaryFromReader);
      msg.addPlayerList(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStartTime(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEndTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.myproto.ResponsePushRoomInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.myproto.ResponsePushRoomInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.myproto.ResponsePushRoomInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.ResponsePushRoomInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAddTime();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getTimeout();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getSequenceNumber();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getRandSeek();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getPlayerListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.myproto.Player.serializeBinaryToWriter
    );
  }
  f = message.getRoomId();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getStartTime();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getEndTime();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.myproto.ResponsePushRoomInfo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.myproto.ResponsePushRoomInfo} returns this
 */
proto.myproto.ResponsePushRoomInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 add_time = 2;
 * @return {number}
 */
proto.myproto.ResponsePushRoomInfo.prototype.getAddTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.ResponsePushRoomInfo} returns this
 */
proto.myproto.ResponsePushRoomInfo.prototype.setAddTime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 status = 3;
 * @return {number}
 */
proto.myproto.ResponsePushRoomInfo.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.ResponsePushRoomInfo} returns this
 */
proto.myproto.ResponsePushRoomInfo.prototype.setStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 timeout = 4;
 * @return {number}
 */
proto.myproto.ResponsePushRoomInfo.prototype.getTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.ResponsePushRoomInfo} returns this
 */
proto.myproto.ResponsePushRoomInfo.prototype.setTimeout = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 sequence_number = 5;
 * @return {number}
 */
proto.myproto.ResponsePushRoomInfo.prototype.getSequenceNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.ResponsePushRoomInfo} returns this
 */
proto.myproto.ResponsePushRoomInfo.prototype.setSequenceNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 rand_seek = 6;
 * @return {number}
 */
proto.myproto.ResponsePushRoomInfo.prototype.getRandSeek = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.ResponsePushRoomInfo} returns this
 */
proto.myproto.ResponsePushRoomInfo.prototype.setRandSeek = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * repeated Player player_list = 7;
 * @return {!Array<!proto.myproto.Player>}
 */
proto.myproto.ResponsePushRoomInfo.prototype.getPlayerListList = function() {
  return /** @type{!Array<!proto.myproto.Player>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.myproto.Player, 7));
};


/**
 * @param {!Array<!proto.myproto.Player>} value
 * @return {!proto.myproto.ResponsePushRoomInfo} returns this
*/
proto.myproto.ResponsePushRoomInfo.prototype.setPlayerListList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.myproto.Player=} opt_value
 * @param {number=} opt_index
 * @return {!proto.myproto.Player}
 */
proto.myproto.ResponsePushRoomInfo.prototype.addPlayerList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.myproto.Player, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.myproto.ResponsePushRoomInfo} returns this
 */
proto.myproto.ResponsePushRoomInfo.prototype.clearPlayerListList = function() {
  return this.setPlayerListList([]);
};


/**
 * optional string room_id = 8;
 * @return {string}
 */
proto.myproto.ResponsePushRoomInfo.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.myproto.ResponsePushRoomInfo} returns this
 */
proto.myproto.ResponsePushRoomInfo.prototype.setRoomId = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional int32 start_time = 9;
 * @return {number}
 */
proto.myproto.ResponsePushRoomInfo.prototype.getStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.ResponsePushRoomInfo} returns this
 */
proto.myproto.ResponsePushRoomInfo.prototype.setStartTime = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 end_time = 10;
 * @return {number}
 */
proto.myproto.ResponsePushRoomInfo.prototype.getEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.ResponsePushRoomInfo} returns this
 */
proto.myproto.ResponsePushRoomInfo.prototype.setEndTime = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.myproto.ResponsePushRoomHistory.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.myproto.ResponsePushRoomHistory.prototype.toObject = function(opt_includeInstance) {
  return proto.myproto.ResponsePushRoomHistory.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.myproto.ResponsePushRoomHistory} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.ResponsePushRoomHistory.toObject = function(includeInstance, msg) {
  var f, obj = {
    listList: jspb.Message.toObjectList(msg.getListList(),
    proto.myproto.ResponseRoomHistory.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.myproto.ResponsePushRoomHistory}
 */
proto.myproto.ResponsePushRoomHistory.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.myproto.ResponsePushRoomHistory;
  return proto.myproto.ResponsePushRoomHistory.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.myproto.ResponsePushRoomHistory} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.myproto.ResponsePushRoomHistory}
 */
proto.myproto.ResponsePushRoomHistory.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.myproto.ResponseRoomHistory;
      reader.readMessage(value,proto.myproto.ResponseRoomHistory.deserializeBinaryFromReader);
      msg.addList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.myproto.ResponsePushRoomHistory.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.myproto.ResponsePushRoomHistory.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.myproto.ResponsePushRoomHistory} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.ResponsePushRoomHistory.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.myproto.ResponseRoomHistory.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ResponseRoomHistory list = 1;
 * @return {!Array<!proto.myproto.ResponseRoomHistory>}
 */
proto.myproto.ResponsePushRoomHistory.prototype.getListList = function() {
  return /** @type{!Array<!proto.myproto.ResponseRoomHistory>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.myproto.ResponseRoomHistory, 1));
};


/**
 * @param {!Array<!proto.myproto.ResponseRoomHistory>} value
 * @return {!proto.myproto.ResponsePushRoomHistory} returns this
*/
proto.myproto.ResponsePushRoomHistory.prototype.setListList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.myproto.ResponseRoomHistory=} opt_value
 * @param {number=} opt_index
 * @return {!proto.myproto.ResponseRoomHistory}
 */
proto.myproto.ResponsePushRoomHistory.prototype.addList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.myproto.ResponseRoomHistory, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.myproto.ResponsePushRoomHistory} returns this
 */
proto.myproto.ResponsePushRoomHistory.prototype.clearListList = function() {
  return this.setListList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.myproto.ResponseRoomHistory.prototype.toObject = function(opt_includeInstance) {
  return proto.myproto.ResponseRoomHistory.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.myproto.ResponseRoomHistory} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.ResponseRoomHistory.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    action: jspb.Message.getFieldWithDefault(msg, 2, ""),
    content: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.myproto.ResponseRoomHistory}
 */
proto.myproto.ResponseRoomHistory.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.myproto.ResponseRoomHistory;
  return proto.myproto.ResponseRoomHistory.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.myproto.ResponseRoomHistory} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.myproto.ResponseRoomHistory}
 */
proto.myproto.ResponseRoomHistory.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAction(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.myproto.ResponseRoomHistory.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.myproto.ResponseRoomHistory.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.myproto.ResponseRoomHistory} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.ResponseRoomHistory.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getAction();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.myproto.ResponseRoomHistory.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.ResponseRoomHistory} returns this
 */
proto.myproto.ResponseRoomHistory.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string action = 2;
 * @return {string}
 */
proto.myproto.ResponseRoomHistory.prototype.getAction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.myproto.ResponseRoomHistory} returns this
 */
proto.myproto.ResponseRoomHistory.prototype.setAction = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string content = 3;
 * @return {string}
 */
proto.myproto.ResponseRoomHistory.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.myproto.ResponseRoomHistory} returns this
 */
proto.myproto.ResponseRoomHistory.prototype.setContent = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.myproto.ResponseOtherPlayerResumeGame.prototype.toObject = function(opt_includeInstance) {
  return proto.myproto.ResponseOtherPlayerResumeGame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.myproto.ResponseOtherPlayerResumeGame} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.ResponseOtherPlayerResumeGame.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    roomId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sequenceNumber: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.myproto.ResponseOtherPlayerResumeGame}
 */
proto.myproto.ResponseOtherPlayerResumeGame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.myproto.ResponseOtherPlayerResumeGame;
  return proto.myproto.ResponseOtherPlayerResumeGame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.myproto.ResponseOtherPlayerResumeGame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.myproto.ResponseOtherPlayerResumeGame}
 */
proto.myproto.ResponseOtherPlayerResumeGame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlayerId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSequenceNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.myproto.ResponseOtherPlayerResumeGame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.myproto.ResponseOtherPlayerResumeGame.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.myproto.ResponseOtherPlayerResumeGame} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.ResponseOtherPlayerResumeGame.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRoomId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSequenceNumber();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 player_id = 1;
 * @return {number}
 */
proto.myproto.ResponseOtherPlayerResumeGame.prototype.getPlayerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.ResponseOtherPlayerResumeGame} returns this
 */
proto.myproto.ResponseOtherPlayerResumeGame.prototype.setPlayerId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string room_id = 2;
 * @return {string}
 */
proto.myproto.ResponseOtherPlayerResumeGame.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.myproto.ResponseOtherPlayerResumeGame} returns this
 */
proto.myproto.ResponseOtherPlayerResumeGame.prototype.setRoomId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 sequence_number = 3;
 * @return {number}
 */
proto.myproto.ResponseOtherPlayerResumeGame.prototype.getSequenceNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.ResponseOtherPlayerResumeGame} returns this
 */
proto.myproto.ResponseOtherPlayerResumeGame.prototype.setSequenceNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.myproto.Player.prototype.toObject = function(opt_includeInstance) {
  return proto.myproto.Player.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.myproto.Player} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.Player.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    roleId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    nickname: jspb.Message.getFieldWithDefault(msg, 3, ""),
    status: jspb.Message.getFieldWithDefault(msg, 4, 0),
    addTime: jspb.Message.getFieldWithDefault(msg, 5, 0),
    uptime: jspb.Message.getFieldWithDefault(msg, 6, 0),
    roomId: jspb.Message.getFieldWithDefault(msg, 7, ""),
    sessionId: jspb.Message.getFieldWithDefault(msg, 8, ""),
    timeout: jspb.Message.getFieldWithDefault(msg, 9, 0),
    contentType: jspb.Message.getFieldWithDefault(msg, 10, 0),
    protocolType: jspb.Message.getFieldWithDefault(msg, 11, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.myproto.Player}
 */
proto.myproto.Player.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.myproto.Player;
  return proto.myproto.Player.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.myproto.Player} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.myproto.Player}
 */
proto.myproto.Player.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoleId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNickname(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAddTime(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUptime(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionId(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTimeout(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setContentType(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setProtocolType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.myproto.Player.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.myproto.Player.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.myproto.Player} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.Player.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRoleId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getNickname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getAddTime();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getUptime();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getRoomId();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getSessionId();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getTimeout();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getContentType();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getProtocolType();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.myproto.Player.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.Player} returns this
 */
proto.myproto.Player.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 role_id = 2;
 * @return {number}
 */
proto.myproto.Player.prototype.getRoleId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.Player} returns this
 */
proto.myproto.Player.prototype.setRoleId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string nickname = 3;
 * @return {string}
 */
proto.myproto.Player.prototype.getNickname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.myproto.Player} returns this
 */
proto.myproto.Player.prototype.setNickname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 status = 4;
 * @return {number}
 */
proto.myproto.Player.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.Player} returns this
 */
proto.myproto.Player.prototype.setStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 add_time = 5;
 * @return {number}
 */
proto.myproto.Player.prototype.getAddTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.Player} returns this
 */
proto.myproto.Player.prototype.setAddTime = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 upTime = 6;
 * @return {number}
 */
proto.myproto.Player.prototype.getUptime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.Player} returns this
 */
proto.myproto.Player.prototype.setUptime = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string room_id = 7;
 * @return {string}
 */
proto.myproto.Player.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.myproto.Player} returns this
 */
proto.myproto.Player.prototype.setRoomId = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string session_id = 8;
 * @return {string}
 */
proto.myproto.Player.prototype.getSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.myproto.Player} returns this
 */
proto.myproto.Player.prototype.setSessionId = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional int32 timeout = 9;
 * @return {number}
 */
proto.myproto.Player.prototype.getTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.Player} returns this
 */
proto.myproto.Player.prototype.setTimeout = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 content_type = 10;
 * @return {number}
 */
proto.myproto.Player.prototype.getContentType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.Player} returns this
 */
proto.myproto.Player.prototype.setContentType = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int32 protocol_type = 11;
 * @return {number}
 */
proto.myproto.Player.prototype.getProtocolType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.Player} returns this
 */
proto.myproto.Player.prototype.setProtocolType = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.myproto.ResponseRestartGame.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.myproto.ResponseRestartGame.prototype.toObject = function(opt_includeInstance) {
  return proto.myproto.ResponseRestartGame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.myproto.ResponseRestartGame} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.ResponseRestartGame.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    playerIdsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.myproto.ResponseRestartGame}
 */
proto.myproto.ResponseRestartGame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.myproto.ResponseRestartGame;
  return proto.myproto.ResponseRestartGame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.myproto.ResponseRestartGame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.myproto.ResponseRestartGame}
 */
proto.myproto.ResponseRestartGame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addPlayerIds(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.myproto.ResponseRestartGame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.myproto.ResponseRestartGame.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.myproto.ResponseRestartGame} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.ResponseRestartGame.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlayerIdsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      2,
      f
    );
  }
};


/**
 * optional string room_id = 1;
 * @return {string}
 */
proto.myproto.ResponseRestartGame.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.myproto.ResponseRestartGame} returns this
 */
proto.myproto.ResponseRestartGame.prototype.setRoomId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated int32 player_ids = 2;
 * @return {!Array<number>}
 */
proto.myproto.ResponseRestartGame.prototype.getPlayerIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.myproto.ResponseRestartGame} returns this
 */
proto.myproto.ResponseRestartGame.prototype.setPlayerIdsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.myproto.ResponseRestartGame} returns this
 */
proto.myproto.ResponseRestartGame.prototype.addPlayerIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.myproto.ResponseRestartGame} returns this
 */
proto.myproto.ResponseRestartGame.prototype.clearPlayerIdsList = function() {
  return this.setPlayerIdsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.myproto.ResponsePlayerMatchSignFailed.prototype.toObject = function(opt_includeInstance) {
  return proto.myproto.ResponsePlayerMatchSignFailed.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.myproto.ResponsePlayerMatchSignFailed} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.ResponsePlayerMatchSignFailed.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    msg: jspb.Message.getFieldWithDefault(msg, 2, ""),
    code: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.myproto.ResponsePlayerMatchSignFailed}
 */
proto.myproto.ResponsePlayerMatchSignFailed.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.myproto.ResponsePlayerMatchSignFailed;
  return proto.myproto.ResponsePlayerMatchSignFailed.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.myproto.ResponsePlayerMatchSignFailed} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.myproto.ResponsePlayerMatchSignFailed}
 */
proto.myproto.ResponsePlayerMatchSignFailed.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlayerId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsg(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.myproto.ResponsePlayerMatchSignFailed.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.myproto.ResponsePlayerMatchSignFailed.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.myproto.ResponsePlayerMatchSignFailed} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.ResponsePlayerMatchSignFailed.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMsg();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 player_id = 1;
 * @return {number}
 */
proto.myproto.ResponsePlayerMatchSignFailed.prototype.getPlayerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.ResponsePlayerMatchSignFailed} returns this
 */
proto.myproto.ResponsePlayerMatchSignFailed.prototype.setPlayerId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string msg = 2;
 * @return {string}
 */
proto.myproto.ResponsePlayerMatchSignFailed.prototype.getMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.myproto.ResponsePlayerMatchSignFailed} returns this
 */
proto.myproto.ResponsePlayerMatchSignFailed.prototype.setMsg = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 code = 3;
 * @return {number}
 */
proto.myproto.ResponsePlayerMatchSignFailed.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.ResponsePlayerMatchSignFailed} returns this
 */
proto.myproto.ResponsePlayerMatchSignFailed.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.myproto.ResponsePlayerMatchingFailed.prototype.toObject = function(opt_includeInstance) {
  return proto.myproto.ResponsePlayerMatchingFailed.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.myproto.ResponsePlayerMatchingFailed} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.ResponsePlayerMatchingFailed.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    msg: jspb.Message.getFieldWithDefault(msg, 2, ""),
    roomid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    code: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.myproto.ResponsePlayerMatchingFailed}
 */
proto.myproto.ResponsePlayerMatchingFailed.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.myproto.ResponsePlayerMatchingFailed;
  return proto.myproto.ResponsePlayerMatchingFailed.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.myproto.ResponsePlayerMatchingFailed} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.myproto.ResponsePlayerMatchingFailed}
 */
proto.myproto.ResponsePlayerMatchingFailed.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlayerId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsg(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.myproto.ResponsePlayerMatchingFailed.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.myproto.ResponsePlayerMatchingFailed.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.myproto.ResponsePlayerMatchingFailed} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.ResponsePlayerMatchingFailed.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMsg();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRoomid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional int32 player_id = 1;
 * @return {number}
 */
proto.myproto.ResponsePlayerMatchingFailed.prototype.getPlayerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.ResponsePlayerMatchingFailed} returns this
 */
proto.myproto.ResponsePlayerMatchingFailed.prototype.setPlayerId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string msg = 2;
 * @return {string}
 */
proto.myproto.ResponsePlayerMatchingFailed.prototype.getMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.myproto.ResponsePlayerMatchingFailed} returns this
 */
proto.myproto.ResponsePlayerMatchingFailed.prototype.setMsg = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string roomId = 3;
 * @return {string}
 */
proto.myproto.ResponsePlayerMatchingFailed.prototype.getRoomid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.myproto.ResponsePlayerMatchingFailed} returns this
 */
proto.myproto.ResponsePlayerMatchingFailed.prototype.setRoomid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 code = 4;
 * @return {number}
 */
proto.myproto.ResponsePlayerMatchingFailed.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.ResponsePlayerMatchingFailed} returns this
 */
proto.myproto.ResponsePlayerMatchingFailed.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.myproto.CfgServer.prototype.toObject = function(opt_includeInstance) {
  return proto.myproto.CfgServer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.myproto.CfgServer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.CfgServer.toObject = function(includeInstance, msg) {
  var f, obj = {
    listenip: jspb.Message.getFieldWithDefault(msg, 1, ""),
    outip: jspb.Message.getFieldWithDefault(msg, 2, ""),
    httpdrootpath: jspb.Message.getFieldWithDefault(msg, 3, ""),
    httpport: jspb.Message.getFieldWithDefault(msg, 4, ""),
    wsport: jspb.Message.getFieldWithDefault(msg, 5, ""),
    udpport: jspb.Message.getFieldWithDefault(msg, 6, ""),
    protocol: jspb.Message.getFieldWithDefault(msg, 7, 0),
    wsuri: jspb.Message.getFieldWithDefault(msg, 8, ""),
    contenttype: jspb.Message.getFieldWithDefault(msg, 9, 0),
    loginauthtype: jspb.Message.getFieldWithDefault(msg, 10, ""),
    loginauthsecretkey: jspb.Message.getFieldWithDefault(msg, 11, ""),
    maxclientconnnum: jspb.Message.getFieldWithDefault(msg, 12, 0),
    msgcontentmax: jspb.Message.getFieldWithDefault(msg, 13, 0),
    iotimeout: jspb.Message.getFieldWithDefault(msg, 14, 0),
    conntimeout: jspb.Message.getFieldWithDefault(msg, 15, 0),
    mapsize: jspb.Message.getFieldWithDefault(msg, 16, 0),
    roompeople: jspb.Message.getFieldWithDefault(msg, 17, 0),
    roomtimeout: jspb.Message.getFieldWithDefault(msg, 18, 0),
    offlinewaittime: jspb.Message.getFieldWithDefault(msg, 19, 0),
    lockmode: jspb.Message.getFieldWithDefault(msg, 20, 0),
    fps: jspb.Message.getFieldWithDefault(msg, 21, 0),
    roomreadytimeout: jspb.Message.getFieldWithDefault(msg, 22, 0),
    store: jspb.Message.getFieldWithDefault(msg, 23, 0),
    tcpport: jspb.Message.getFieldWithDefault(msg, 24, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.myproto.CfgServer}
 */
proto.myproto.CfgServer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.myproto.CfgServer;
  return proto.myproto.CfgServer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.myproto.CfgServer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.myproto.CfgServer}
 */
proto.myproto.CfgServer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setListenip(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutip(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setHttpdrootpath(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setHttpport(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setWsport(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setUdpport(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setProtocol(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setWsuri(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setContenttype(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setLoginauthtype(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setLoginauthsecretkey(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxclientconnnum(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMsgcontentmax(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIotimeout(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setConntimeout(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMapsize(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoompeople(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoomtimeout(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOfflinewaittime(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLockmode(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFps(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoomreadytimeout(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStore(value);
      break;
    case 24:
      var value = /** @type {string} */ (reader.readString());
      msg.setTcpport(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.myproto.CfgServer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.myproto.CfgServer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.myproto.CfgServer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.CfgServer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getListenip();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOutip();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getHttpdrootpath();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getHttpport();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getWsport();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getUdpport();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getProtocol();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getWsuri();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getContenttype();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getLoginauthtype();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getLoginauthsecretkey();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getMaxclientconnnum();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getMsgcontentmax();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getIotimeout();
  if (f !== 0) {
    writer.writeInt64(
      14,
      f
    );
  }
  f = message.getConntimeout();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = message.getMapsize();
  if (f !== 0) {
    writer.writeInt32(
      16,
      f
    );
  }
  f = message.getRoompeople();
  if (f !== 0) {
    writer.writeInt32(
      17,
      f
    );
  }
  f = message.getRoomtimeout();
  if (f !== 0) {
    writer.writeInt32(
      18,
      f
    );
  }
  f = message.getOfflinewaittime();
  if (f !== 0) {
    writer.writeInt32(
      19,
      f
    );
  }
  f = message.getLockmode();
  if (f !== 0) {
    writer.writeInt32(
      20,
      f
    );
  }
  f = message.getFps();
  if (f !== 0) {
    writer.writeInt32(
      21,
      f
    );
  }
  f = message.getRoomreadytimeout();
  if (f !== 0) {
    writer.writeInt32(
      22,
      f
    );
  }
  f = message.getStore();
  if (f !== 0) {
    writer.writeInt32(
      23,
      f
    );
  }
  f = message.getTcpport();
  if (f.length > 0) {
    writer.writeString(
      24,
      f
    );
  }
};


/**
 * optional string ListenIp = 1;
 * @return {string}
 */
proto.myproto.CfgServer.prototype.getListenip = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.myproto.CfgServer} returns this
 */
proto.myproto.CfgServer.prototype.setListenip = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string OutIp = 2;
 * @return {string}
 */
proto.myproto.CfgServer.prototype.getOutip = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.myproto.CfgServer} returns this
 */
proto.myproto.CfgServer.prototype.setOutip = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string HttpdRootPath = 3;
 * @return {string}
 */
proto.myproto.CfgServer.prototype.getHttpdrootpath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.myproto.CfgServer} returns this
 */
proto.myproto.CfgServer.prototype.setHttpdrootpath = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string HttpPort = 4;
 * @return {string}
 */
proto.myproto.CfgServer.prototype.getHttpport = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.myproto.CfgServer} returns this
 */
proto.myproto.CfgServer.prototype.setHttpport = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string WsPort = 5;
 * @return {string}
 */
proto.myproto.CfgServer.prototype.getWsport = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.myproto.CfgServer} returns this
 */
proto.myproto.CfgServer.prototype.setWsport = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string UdpPort = 6;
 * @return {string}
 */
proto.myproto.CfgServer.prototype.getUdpport = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.myproto.CfgServer} returns this
 */
proto.myproto.CfgServer.prototype.setUdpport = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional int32 Protocol = 7;
 * @return {number}
 */
proto.myproto.CfgServer.prototype.getProtocol = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.CfgServer} returns this
 */
proto.myproto.CfgServer.prototype.setProtocol = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string WsUri = 8;
 * @return {string}
 */
proto.myproto.CfgServer.prototype.getWsuri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.myproto.CfgServer} returns this
 */
proto.myproto.CfgServer.prototype.setWsuri = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional int32 ContentType = 9;
 * @return {number}
 */
proto.myproto.CfgServer.prototype.getContenttype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.CfgServer} returns this
 */
proto.myproto.CfgServer.prototype.setContenttype = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional string LoginAuthType = 10;
 * @return {string}
 */
proto.myproto.CfgServer.prototype.getLoginauthtype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.myproto.CfgServer} returns this
 */
proto.myproto.CfgServer.prototype.setLoginauthtype = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string LoginAuthSecretKey = 11;
 * @return {string}
 */
proto.myproto.CfgServer.prototype.getLoginauthsecretkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.myproto.CfgServer} returns this
 */
proto.myproto.CfgServer.prototype.setLoginauthsecretkey = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional int32 MaxClientConnNum = 12;
 * @return {number}
 */
proto.myproto.CfgServer.prototype.getMaxclientconnnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.CfgServer} returns this
 */
proto.myproto.CfgServer.prototype.setMaxclientconnnum = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int32 MsgContentMax = 13;
 * @return {number}
 */
proto.myproto.CfgServer.prototype.getMsgcontentmax = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.CfgServer} returns this
 */
proto.myproto.CfgServer.prototype.setMsgcontentmax = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional int64 IOTimeout = 14;
 * @return {number}
 */
proto.myproto.CfgServer.prototype.getIotimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.CfgServer} returns this
 */
proto.myproto.CfgServer.prototype.setIotimeout = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional int32 ConnTimeout = 15;
 * @return {number}
 */
proto.myproto.CfgServer.prototype.getConntimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.CfgServer} returns this
 */
proto.myproto.CfgServer.prototype.setConntimeout = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional int32 MapSize = 16;
 * @return {number}
 */
proto.myproto.CfgServer.prototype.getMapsize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.CfgServer} returns this
 */
proto.myproto.CfgServer.prototype.setMapsize = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional int32 RoomPeople = 17;
 * @return {number}
 */
proto.myproto.CfgServer.prototype.getRoompeople = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.CfgServer} returns this
 */
proto.myproto.CfgServer.prototype.setRoompeople = function(value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional int32 RoomTimeout = 18;
 * @return {number}
 */
proto.myproto.CfgServer.prototype.getRoomtimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.CfgServer} returns this
 */
proto.myproto.CfgServer.prototype.setRoomtimeout = function(value) {
  return jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional int32 OffLineWaitTime = 19;
 * @return {number}
 */
proto.myproto.CfgServer.prototype.getOfflinewaittime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.CfgServer} returns this
 */
proto.myproto.CfgServer.prototype.setOfflinewaittime = function(value) {
  return jspb.Message.setProto3IntField(this, 19, value);
};


/**
 * optional int32 LockMode = 20;
 * @return {number}
 */
proto.myproto.CfgServer.prototype.getLockmode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.CfgServer} returns this
 */
proto.myproto.CfgServer.prototype.setLockmode = function(value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};


/**
 * optional int32 FPS = 21;
 * @return {number}
 */
proto.myproto.CfgServer.prototype.getFps = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.CfgServer} returns this
 */
proto.myproto.CfgServer.prototype.setFps = function(value) {
  return jspb.Message.setProto3IntField(this, 21, value);
};


/**
 * optional int32 RoomReadyTimeout = 22;
 * @return {number}
 */
proto.myproto.CfgServer.prototype.getRoomreadytimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.CfgServer} returns this
 */
proto.myproto.CfgServer.prototype.setRoomreadytimeout = function(value) {
  return jspb.Message.setProto3IntField(this, 22, value);
};


/**
 * optional int32 Store = 23;
 * @return {number}
 */
proto.myproto.CfgServer.prototype.getStore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.CfgServer} returns this
 */
proto.myproto.CfgServer.prototype.setStore = function(value) {
  return jspb.Message.setProto3IntField(this, 23, value);
};


/**
 * optional string TcpPort = 24;
 * @return {string}
 */
proto.myproto.CfgServer.prototype.getTcpport = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 24, ""));
};


/**
 * @param {string} value
 * @return {!proto.myproto.CfgServer} returns this
 */
proto.myproto.CfgServer.prototype.setTcpport = function(value) {
  return jspb.Message.setProto3StringField(this, 24, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.myproto.CfgProtocolActions.prototype.toObject = function(opt_includeInstance) {
  return proto.myproto.CfgProtocolActions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.myproto.CfgProtocolActions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.CfgProtocolActions.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientMap: (f = msg.getClientMap()) ? f.toObject(includeInstance, proto.myproto.CfgActions.toObject) : [],
    serverMap: (f = msg.getServerMap()) ? f.toObject(includeInstance, proto.myproto.CfgActions.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.myproto.CfgProtocolActions}
 */
proto.myproto.CfgProtocolActions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.myproto.CfgProtocolActions;
  return proto.myproto.CfgProtocolActions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.myproto.CfgProtocolActions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.myproto.CfgProtocolActions}
 */
proto.myproto.CfgProtocolActions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getClientMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readMessage, proto.myproto.CfgActions.deserializeBinaryFromReader, 0, new proto.myproto.CfgActions());
         });
      break;
    case 2:
      var value = msg.getServerMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readMessage, proto.myproto.CfgActions.deserializeBinaryFromReader, 0, new proto.myproto.CfgActions());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.myproto.CfgProtocolActions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.myproto.CfgProtocolActions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.myproto.CfgProtocolActions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.CfgProtocolActions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeMessage, proto.myproto.CfgActions.serializeBinaryToWriter);
  }
  f = message.getServerMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeMessage, proto.myproto.CfgActions.serializeBinaryToWriter);
  }
};


/**
 * map<int32, CfgActions> client = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.myproto.CfgActions>}
 */
proto.myproto.CfgProtocolActions.prototype.getClientMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.myproto.CfgActions>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.myproto.CfgActions));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.myproto.CfgProtocolActions} returns this
 */
proto.myproto.CfgProtocolActions.prototype.clearClientMap = function() {
  this.getClientMap().clear();
  return this;};


/**
 * map<int32, CfgActions> server = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.myproto.CfgActions>}
 */
proto.myproto.CfgProtocolActions.prototype.getServerMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.myproto.CfgActions>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.myproto.CfgActions));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.myproto.CfgProtocolActions} returns this
 */
proto.myproto.CfgProtocolActions.prototype.clearServerMap = function() {
  this.getServerMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.myproto.CfgActions.prototype.toObject = function(opt_includeInstance) {
  return proto.myproto.CfgActions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.myproto.CfgActions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.CfgActions.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    action: jspb.Message.getFieldWithDefault(msg, 2, ""),
    desc: jspb.Message.getFieldWithDefault(msg, 3, ""),
    demo: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.myproto.CfgActions}
 */
proto.myproto.CfgActions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.myproto.CfgActions;
  return proto.myproto.CfgActions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.myproto.CfgActions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.myproto.CfgActions}
 */
proto.myproto.CfgActions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAction(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDesc(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDemo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.myproto.CfgActions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.myproto.CfgActions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.myproto.CfgActions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.CfgActions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getAction();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDesc();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDemo();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.myproto.CfgActions.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.CfgActions} returns this
 */
proto.myproto.CfgActions.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string action = 2;
 * @return {string}
 */
proto.myproto.CfgActions.prototype.getAction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.myproto.CfgActions} returns this
 */
proto.myproto.CfgActions.prototype.setAction = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string desc = 3;
 * @return {string}
 */
proto.myproto.CfgActions.prototype.getDesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.myproto.CfgActions} returns this
 */
proto.myproto.CfgActions.prototype.setDesc = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string demo = 4;
 * @return {string}
 */
proto.myproto.CfgActions.prototype.getDemo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.myproto.CfgActions} returns this
 */
proto.myproto.CfgActions.prototype.setDemo = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.myproto.Msg.prototype.toObject = function(opt_includeInstance) {
  return proto.myproto.Msg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.myproto.Msg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.Msg.toObject = function(includeInstance, msg) {
  var f, obj = {
    actionId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    action: jspb.Message.getFieldWithDefault(msg, 2, ""),
    content: jspb.Message.getFieldWithDefault(msg, 3, ""),
    contentType: jspb.Message.getFieldWithDefault(msg, 4, 0),
    protocolType: jspb.Message.getFieldWithDefault(msg, 5, 0),
    sessionid: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.myproto.Msg}
 */
proto.myproto.Msg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.myproto.Msg;
  return proto.myproto.Msg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.myproto.Msg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.myproto.Msg}
 */
proto.myproto.Msg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setActionId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAction(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setContentType(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setProtocolType(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.myproto.Msg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.myproto.Msg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.myproto.Msg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.myproto.Msg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActionId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getAction();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getContentType();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getProtocolType();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getSessionid();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional int32 action_id = 1;
 * @return {number}
 */
proto.myproto.Msg.prototype.getActionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.Msg} returns this
 */
proto.myproto.Msg.prototype.setActionId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string action = 2;
 * @return {string}
 */
proto.myproto.Msg.prototype.getAction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.myproto.Msg} returns this
 */
proto.myproto.Msg.prototype.setAction = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string content = 3;
 * @return {string}
 */
proto.myproto.Msg.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.myproto.Msg} returns this
 */
proto.myproto.Msg.prototype.setContent = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 content_type = 4;
 * @return {number}
 */
proto.myproto.Msg.prototype.getContentType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.Msg} returns this
 */
proto.myproto.Msg.prototype.setContentType = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 protocol_type = 5;
 * @return {number}
 */
proto.myproto.Msg.prototype.getProtocolType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.myproto.Msg} returns this
 */
proto.myproto.Msg.prototype.setProtocolType = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string sessionId = 6;
 * @return {string}
 */
proto.myproto.Msg.prototype.getSessionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.myproto.Msg} returns this
 */
proto.myproto.Msg.prototype.setSessionid = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


goog.object.extend(exports, proto.myproto);
